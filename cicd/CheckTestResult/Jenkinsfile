#!/usr/bin/env groovy

pipeline {
    agent { node { label 'cms-dmwm-cc7' } }
    //options {
    //    skipDefaultCheckout(true)
    //}
    //environment {
    //    IMAGE_TAG = "pypi-${BUILD_TAG}"
    //    CMSCRAB_REGISTRY_CRED = credentials('edcd5106-7325-45be-a595-2a769fee0c9c') // robot-cmscrab+jenkins/****** (cmscrab robot account)
    //}
    parameters {
        string(name: 'issueTitle')
        string(name: 'Repo_GH_Issue', defaultValue: 'novicecpp/CRABServer')
        string(name: 'Repo_Testing_Scripts', defaultValue: 'novicecpp/CRABServer')
        string(name: 'Branch_Testing_Scripts', defaultValue: 'master')
        string(name: 'Test_Docker_Image', defaultValue: 'registry.cern.ch/cmscrab/crabtesting:220701')
        string(name: 'Manual_Task_Names', defaultValue: '')

        // inherit from parent tasks
        string(name: 'CRABClient_version', defaultValue: 'prod')
        string(name: 'CRABServer_tag', defaultValue: 'HEAD')
        string(name: 'REST_Instance', defaultValue: 'preprod')
        choice(name: 'CMSSW_release',
               choices: ['CMSSW_13_0_2', 'CMSSW_10_6_26'])
        booleanParam(name: 'Task_Submission_Status_Tracking', defaultValue: true)
        booleanParam(name: 'Check_Publication_Status', defaultValue: true)
    }
    stages {
        stage('Check test result') {
            steps {
                // thanks to jantony_pdx's stackoverflow user
                // https://stackoverflow.com/questions/49704064/retry-a-jenkins-pipeline-job-on-a-specific-error-message
                script {
                    // wrap with timeout so the job aborts if no activity
                    timeout(activity: true, time: 5, unit: 'MINUTES') {
                        // loop until the inner function returns true
                        waitUntil {
                            // setup or increment "count" counter and max value
                            count = (binding.hasVariable('count')) ? count + 1 : 1
                            countMax = 3

                            println "try: $count"

                            // Note: you must include the "|| true" after your command,
                            // so that the exit code always returns as 0. The "sh" command is
                            // actually running '/bin/sh -xe'. The '-e' option forces the script
                            // to exit on non-zero exit code. Prevent this by forcing a 0 exit code
                            // by adding "|| true"

                            // execute command and capture stdout
                            // Uncomment one of these 3 lines to test different conditions.
                            output = sh returnStdout: true, script: '''
                                #! /bin/bash
                                ls -alhR
                                printenv | sort
                                bash cicd/CheckTestResult/CheckTestResult.sh || true

                            '''
                            // output = sh returnStdout: true, script: 'echo "BUILD FAILED" || true'
                            // output = sh returnStdout: true, script: 'echo "something else happened" || true'

                            // show the output in the log
                            println output

                            // run different regex tests against the output to check the state of your build
                            buildOK = output ==~ /(?s).SUCCEEDED.*/
                            buildERR = output ==~ /(?s).*FULL-STATUS-UNKNOWN.*/

                            // then check your conditions
                            if (buildOK) {
                                return true     // success, so exit loop
                            } else if (buildERR) {
                                if (count >= countMax) {
                                    // count exceeds threshold, so throw an error (exits pipeline)
                                    error "Retried $count times. Giving up..."
                                }
                                // wait a bit before retrying
                                sleep time: 5, unit: 'MINUTES'
                                return false    // repeat loop
                            } else {
                                // throw an error (exits pipeline)
                                error 'Unknown error - aborting build'
                            }
                        }
                    }
                }
            }
            //steps {
            //    sh '''
            //        #! /bin/bash
            //        ls -alhR
            //        printenv | sort
            //        bash cicd/CheckTestResult/CheckTestResult.sh
            //    '''
            //}
        }
    }
    post {
        // Clean after build
        always {
            archiveArtifacts(artifacts: '*',
                             allowEmptyArchive: true,
                             fingerprint: true,
                             onlyIfSuccessful: false,
                             caseSensitive: true,
                             defaultExcludes: true,
            )
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
            )
        }
    }
}
