---
default:
  tags:
    - tseethon

variables:
  IMAGE_TAG: "pypi-${CI_COMMIT_REF_SLUG}"

.default_rules:
  rules:
    - if: $CI_COMMIT_BRANCH == "devthree" || $CI_COMMIT_BRANCH == "ci_gitlab"
.tagonly_rules:
  rules:
    - if: $CI_COMMIT_TAG
#.skipbuild_rules:
#  rules:
#    - changes:
#        - cicd/crabserver_pypi/*
#        - cicd/crabtaskworker_pypi/*
#        - src/*
#        - bin/*
#        - scripts/*

stages:
  - build_docker
  - deploy
  - run_testsuite
  - check_testsuite

build_rest_image:
  rules:
    - if: $CI_COMMIT_TAG
  stage: build_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CMSCRAB_REGISTRY_URL\":{\"auth\":\"$(echo -n $CMSCRAB_REGISTRY_USER:$CMSCRAB_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/cicd/crabserver_pypi/Dockerfile"
      --destination "registry.cern.ch/cmscrab/crabserver:${IMAGE_TAG}"

build_tw_image:
  rules:
    - if: $CI_COMMIT_TAG
  stage: build_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CMSCRAB_REGISTRY_URL\":{\"auth\":\"$(echo -n $CMSCRAB_REGISTRY_USER:$CMSCRAB_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/cicd/crabtaskworker_pypi/Dockerfile"
      --destination "registry.cern.ch/cmscrab/crabtaskworker:${IMAGE_TAG}"

deploy_server:
  rules:
    - !reference [.default_rules, rules]
    - !reference [.tagonly_rules, rules]
  stage: deploy
  image:
    name: docker.io/bitnami/kubectl:1.27
    entrypoint: [""]
  script:
    - echo $KUBECONFIG_FILE
    - export KUBECONFIG=$KUBECONFIG_FILE
    - kubectl -n crab set image deployment/crabserver "crabserver=registry.cern.ch/cmscrab/crabserver:${IMAGE_TAG}"


deploy_tw:
  rules:
    - !reference [.default_rules, rules]
    - !reference [.tagonly_rules, rules]
  stage: deploy
  image:
    name: registry.cern.ch/cmscrab/buildtools:latest
    entrypoint: [""]
  script:
    - echo "${CRAB_TW_SSH_KEY}"
    - export CRAB_TW_SSH_KEY_COPY="${CRAB_TW_SSH_KEY}_copy"
    - cp ${CRAB_TW_SSH_KEY} ${CRAB_TW_SSH_KEY_COPY}
    - echo >> ${CRAB_TW_SSH_KEY_COPY}
    - chmod 600 "${CRAB_TW_SSH_KEY_COPY}"
    - export Environment=crab-dev-tw03
    - export Service=TaskWorker
    - export Image="${IMAGE_TAG}"
    - export SSH_KEY=$CRAB_TW_SSH_KEY_COPY
    - bash -x cicd/gitlab/deploy_tw.sh

task_submission_status_tracking:
  rules:
    - !reference [.default_rules, rules]
  stage: run_testsuite
  tags:
    - tseethon-apptainer
  variables:
    GIT_STRATEGY: clone
  script:
    - export CRABClient_version=prod
    - export CRABServer_tag=HEAD
    - export REST_Instance=test12
    - export CMSSW_release=CMSSW_13_0_2
    - export Task_Submission_Status_Tracking=true
    - export Check_Publication_Status=true
    - export Repo_GH_Issue=novicecpp/CRABServer
    - export Repo_Testing_Scripts=novicecpp/CRABServer
    - export Branch_Testing_Scripts=wmcore_pypi
    - export Test_Docker_Image=registry.cern.ch/cmscrab/crabtesting:231009
    - bash -x cicd/gitlab/execute_test.sh
  cache:
    # Pay attention to the key, you may want to to adjust to your needs, but I consider job is retried by having branch or tag identifier as CI_COMMIT_REF_SLUG and commit sha
    - key: $CI_COMMIT_SHA
      paths:
        - artifacts/submitted_tasks_TS
      policy: push

check_test_result:
  rules:
    - !reference [.default_rules, rules]
  stage: check_testsuite
  tags:
    - tseethon-apptainer
  variables:
    GIT_STRATEGY: clone
  script:
    - bash cicd/gitlab/st.sh
  cache:
    - key: $CI_COMMIT_SHA
      paths:
        - artifacts/submitted_tasks_TS
      policy: pull
